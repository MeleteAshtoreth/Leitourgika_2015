Some of the features of the C shell are listed here:

    1.	Customizable environment.
The C shell has three separate files which are used for customizing its environment. These three files are .cshrc, .login, and .logout. Because these files begin with a period (.) they do not usually appear when one types the ls command. In order to see all files beginning with periods, the -a option is used with the ls command.

The .cshrc file contains commands, variable definitions and aliases used any time the C shell is run. When one logs in, the C shell starts by reading the .cshrc file, and sets up any variables and aliases.

The C shell reads the .login file after it has read the .cshrc file. This file is read once only for login shells. This file should be used to set up terminal settings, for example, backspace, suspend, and interrupt characters.

The .logout file contains commands that are run when the user logs out of the system.

Sample .cshrc file

#!/bin/csh
# Sample .cshrc file
setenv EXINIT 'set smd sw=4 wm=2'
set history=50
set savehist=50
set ignoreeof noclobber
if ($?prompt) then
  set prompt='[\!]% '
  alias f finger -R
  alias lo logout
endif

Sample .login file

#!/bin/csh
# Sample .login file
stty erase ^H intr ^C susp ^Z
echo "Welcome to Wiliki\!"
frm -s n

Sample .logout file

#!/bin/csh
# Sample .logout file
echo -n "Logged out of Wiliki "
date


    2.	Abbreviate commands. (Aliases.)
A shorthand can be assigned to a command or sequence of commands which are frequently used. By assigning an alias with the alias command, one can essentially create their own commands, and even "overwrite" existing commands. For example:

alias cc cc -Aa -D_HPUX_SOURCE

This alias definition will substitute the cc with the ANSI compiler option on an HP System (such as Wiliki) whenever cc is typed. To undefine an alias, the unalias command is used.

If the filenames used behind an alias must come before text being substituted, history substitution can be used, as follows:

alias manl 'man \!* | less -p'

This form of the command places the arguments placed after the manl alias between the man command and the | (pipe). 


    3.	History. (Remembers commands typed before.)
If the history variable is set to a numerical value, that many commands typed previous would be remembered in a history list. Commands from the history are numbered from the first command being 1. To see the history, the history command is used.

Commands from the history can be recalled using the exclamation point. For example, !! repeats the previous command, !25 re-types command number 25 from the history, and !-2 re-types the second line previous to the current line.

Individual words from these command lines can also be retrieved using this history. For example, !25:$ returns the last argument (word) from command 25, !!:* returns all the arguments (all words but the first one) from the last command, and !-2:0 returns the command (the first word) of the second line previous.

    4.	Job control. (Run programs in the background or foreground.)
The C shell handles job control, which allows the user to run certain programs in the background, and recall them to the foreground when necessary. In order to place a running process into the background, the suspend character must be set by the stty command shown earlier. Processes may be started in the background by following the command with an ampersand (&).

When a job is placed in the background, information for the job is shown similar to the example given below:

[1] 15934

This specifies that the process has been placed in the background, and is job 1. In order to recall jobs placed in the background, the fg command is used, while the bg command places a recently stopped process into the background. The jobs command gives a list of all processes under control of the current shell. Also, typing a percent sign (%) with the job number brings that particular job to the foreground.

    5.	Shell scripting. (One can write programs using the shell.)
 Shell scripts are programs written in C shell. They are plain text files which can be edited and created by any text editor. There are a few guidelines to follow, however.

   1. Create a file using any text editor. The first line must begin with the string #!/bin/csh.
   2. Give yourself execute permission with the chmod u+x filename command.
   3. You can run the shell script by simply typing filename as if it were a regular command. 

The shell script file can contain any commands which can be typed in, as well as the control structures described above.

Check   https://www.cs.duke.edu/csl/docs/csh.html#scripts   

    6.	Keyboard shortcuts. 
Here are a few keys which may be pressed to perform certain functions.

<escape>
    The escape key preceded by a partial command or filename will attempt to complete the filename. If there are more than one filename matching, the common letters are completed, and the C shell beeps. 
Control-D
    When typed after a partial filename, C shell gives a list of all matching filenames or commands. 
Control-W
    Erases over the previous word. 



The C shell provides programming features listed below:

    Control constructs. (For example, loop and conditional statements.)
    File permissions/existence checking.
    Variable assignment.
    Built-in Variables. 


Pipes
The output of one command can be sent to the input of another command. This is called piping. The commands which are to be piped together are separated by the pipe character. For example:

ls -l | sort -k 5n

This command takes the output of the ls -l command and puts the output of it into the sort command.

By appending an ampersand (&) after the pipe character, one can combine the standard error and standard output and send it to the standard input of the program receiving the piped output .           



!!!!
 After saving this plain text file, with a file name such as morning (or anything else desired), the script is complete and almost ready to run. Scripts are typically run by typing a dot, a forward slash and the file name (with no spaces in between) and then pressing the ENTER key. Thus, for example, if the above script were saved with the name morning, an attempt could be made to execute it by issuing the following command:

    ./morning

However, the script probably will not run, in which case an error message will appear on the screen such as bash: ./morning: Permission denied. This is because the permissions for the file first have to be set to executable. (By default, the permissions for new files are set to read and write only.) The problem can easily be solved by using the chmod command with its 755 option (which will allow the file creator to read, write and execute the file) while in the same directory as that in which the file is located as follows

 How It Works

The first of the three lines tells the operating system what shell to use to interpret the script and the location (i.e., absolute pathname) of the shell. The shell is bash, which is located in the /bin directory (as are all shells); thus the line contains /bin/bash. This instruction is always preceded by a pound sign and an exclamation mark in order to inform the operating system that it is providing the name and location of the shell (or other scripting language).

The second line tells the shell to issue the clear command. This is a very simple command that removes all previous commands and output from the console or terminal window in which the command was issued.

The third line tells the shell to write the phrase Good morning, world. on the screen. It uses the echo command, which instructs the shell to repeat whatever follows it. (The quotation marks are not necessary in this case; however, it is good programming practice to use them, and they can make a big difference in more advanced scripts.) In slightly more technical terms, Good morning, world. is an argument (i.e., input data) that is passed to the echo command.

As is the case with other commands used in shell scripts, clear and echo can also be used independently of scripts. Thus, for example, typing clear on the screen and pressing the ENTER key would remove all previous commands and output and just leave a command prompt for entering the next command. 


What is difference between #!/bin/sh and #!/bin/bash?


bash and sh are two different shells. Basically bash is sh, with more features and better syntax. Most commands work the same, but they are different.

Having said that, you should realize /bin/sh on most systems will be a symbolic link and will not invoke sh. In Ubuntu /bin/sh used to link to bash, typical behavior on Linux distributions, but now has changed to linking to another shell called dash. I would use bash, as that is pretty much the standard (or at least most common, from my experience). In fact, problems arise when a bash script will use #!/bin/sh because the script-maker assumes the link is to bash when it doesn't have to be.

For more info, http://man.cx/sh, http://man.cx/bash.




You need to ensure one more thing before you can execute myenvâ€”it must be in the search path. You can get the search path by executing


   # echo $PATH

If the directory where the file myenv is located is not in the current search path, you must add the directory name in the search path.

How do I add a directory to my $PATH in Ubuntu and make the changes permanent? 
Using ~/.profile to set $PATH
A path set in .bash_profile will only be set in a bash login shell (bash -l). 
If you put your path in .profile it will be available to your complete desktop session. 
That means even metacity will use it.
For example ~/.profile:

if [ -d "$HOME/bin" ] ; then
  PATH="$HOME/bin:$PATH"
fi

Btw, you can check the PATH variable of a process by looking at its environment in /proc/[pid]/environ. (replace [pid] with the number from ps axf)
Note:

bash as a login shell doesn't parse .profile if either .bash_profile or .bash_login exists. From man bash :

    it looks for ~/.bash_profile, ~/.bash_login, and ~/.profile, in that order, and reads and executes commands from the first one that exists and is readable.

See the answers below for information about .pam_environment, or .bashrc for interactive non-login shells, or set the value globally for all users by putting a script into /etc/profile.d/ or use /etc/X11/Xsession.d/ to affect the display managers session.

export PATH=$PATH:directory

Now you can execute the file myenv from the command line as if it were a Linux command:


   # myenv

